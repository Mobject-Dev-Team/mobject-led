<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="LedMatrix" Id="{f42dbf2f-a496-4a2b-b1f8-ec4f7084bf6b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK LedMatrix EXTENDS LedDevice
VAR
	// setup
	height : UDINT;
	width : UDINT;
	x : DINT;
	y : DINT;
	flipX : BOOL;
	flipY : BOOL;
	rotation : UINT;
	
	// buffer
	pixelBufferSize : UDINT;
	pPixelBuffer : POINTER TO Pixel;
	
	// serializer
	nextPixel : UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{da17c8cd-3414-4cf2-ba77-695a7e9fbdcf}" />
    <Folder Name="Destructor" Id="{a287b833-6d69-49cf-b07f-33151d05f264}" />
    <Folder Name="Private" Id="{60ab383b-e95b-437f-855e-a782705283f0}" />
    <Folder Name="Protected" Id="{ddbfd409-df33-4f5d-a859-bc85396e9d80}" />
    <Method Name="CreatePixelBuffer" Id="{28d65814-e936-45f3-98a6-cc61886d629d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreatePixelBuffer
VAR
	tempPixel : Pixel;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pixelBufferSize := width * height * SIZEOF(tempPixel);
pPixelBuffer := __NEW(BYTE, pixelBufferSize);
memset(pPixelBuffer, 0, pixelBufferSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{993e6002-c184-4094-8879-44e25b1fc2ce}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

IF pPixelBuffer = 0 THEN
	RETURN;
END_IF

__DELETE(pPixelBuffer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{1dd23553-72f1-40d4-9f8e-fba27a685fa4}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Height : UDINT;
	Width : UDINT;
	X : UDINT;
	Y : UDINT;
	FlipX : BOOL;
	FlipY : BOOL;
	Rotation : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.height := Height;
THIS^.width := Width;
THIS^.x := X;
THIS^.y := Y;
THIS^.flipX := FlipX;
THIS^.flipY := FlipY;
THIS^.rotation := Rotation;

CreatePixelBuffer();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnResetPixelPointer" Id="{37a95cb5-beed-44cb-a553-00f1ad009375}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnResetPixelPointer
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nextPixel := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnTryGetNextPixel" Id="{c7d8e654-2b8f-46b8-a16d-34417ef35a2a}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnTryGetNextPixel : BOOL
VAR_INPUT
	Destination : REFERENCE TO Pixel;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nextPixel > pixelBufferSize THEN
	OnTryGetNextPixel := FALSE;
	RETURN;
END_IF

IF pixelBufferSize = 0 THEN
	RETURN;
END_IF

Destination := pPixelBuffer[nextPixel];
nextPixel := nextPixel + 1;
OnTryGetNextPixel := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnUpdateFrom" Id="{b7fcc864-5e25-40cd-8b86-b8555e09d36d}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnUpdateFrom
VAR_INPUT
	Source : I_ReadableDisplayBuffer;
END_VAR
VAR
	row : UDINT;
	column : UDINT;
	newRow : UDINT;
	newColumn : UDINT;
	destinationX : DINT;
	destinationY : DINT;
	index: UDINT;
	pixelValue : PIXEL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR row := 0 TO height - 1 DO
	FOR column := 0 TO width - 1 DO
		
		// calculate the index of our own buffer which represents the current col and row
		IF row MOD 2 = 1 THEN
			// on an odd row the direction is reversed.
			index := row * width + ((width - 1) - column);
		ELSE
			index := row * width + column;
		END_IF
		
		CASE rotation OF
			
			0:
				newColumn := column;
				newRow := row;
			90:
				newColumn := height - 1 - row;
				newRow := column;
			180:
				newColumn := width - 1 - column;
				newRow := height - 1 - row;
			270:
				newColumn := row;
				newRow := width - 1 - column;
			
		END_CASE

		IF flipX THEN
			newColumn := width - 1 - newColumn;
		END_IF

		IF flipY THEN
			newRow := height - 1 - newRow;
		END_IF

		destinationX := UDINT_TO_DINT(newColumn) + x;
		destinationY := UDINT_TO_DINT(newRow) + y;
		
		IF NOT Source.TryReadPixel(destinationX, destinationY, pixelValue) THEN
			pPixelBuffer[index] := 16#00000000;
			RETURN;
		END_IF
		
		pPixelBuffer[index] := THIS^.Convert_RGBA_To_RequiredPixelFormat(pixelValue);

	END_FOR
END_FOR


]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>